#+title: My Emacs Configuration
#+options: ^:{} html-postamble:nil
#+property: header-args :mkdirp yes :tangle yes :tangle-mode: #o444 :results silent :noweb yes
#+archive: archives/%s::datetree/
#+startup: indent
* An Explanation
This is a literate configuration for =Emacs=.
Tangling this file creates an Elisp file, =~/.emacs.d/lisp/init.el=.
* Bootstrapping
** early-init
:PROPERTIES:
:header-args: :tangle-mode o444 :results silent :tangle ~/.emacs.d/early-init.el
:END:
Emacs 27.0 introduced an early-init file. It allows customization before package and UI initialization.

#+begin_src emacs-lisp :lexical t
    ;;; early-init.el --- Emacs pre package.el & GUI configuration -*- lexical-binding: t; -*-
    ;;; Code:
(setq package-enable-at-startup nil)
(setq inhibit-default-init nil)

(setq native-comp-async-report-warnings-errors nil)

(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 1)

(defun +gc-after-focus-change ()
  "Run GC when frame loses focus."
  (run-with-idle-timer
   5 nil
   (lambda () (unless (frame-focus-state) (garbage-collect)))))

(defun +reset-init-values ()
  (run-with-idle-timer
   1 nil
   (lambda ()
     (setq file-name-handler-alist default-file-name-handler-alist
           gc-cons-percentage 0.1
           gc-cons-threshold 16777216)
     (message "gc-cons-threshold & file-name-handler-alist restored")
     (when (boundp 'after-focus-change-function)
       (add-function :after after-focus-change-function #'+gc-after-focus-change)))))

(setq server-client-instructions nil)
(setq frame-inhibit-implied-resize t)

(advice-add #'x-apply-session-resources :override #'ignore)
(setq desktop-restore-forces-onscreen nil)


(setq ring-bell-function #'ignore
      inhibit-startup-screen t
      inhibit-startup-message t)

(provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Init File
** lexical binding
The following line turns on lexical binding for performance reasons.
#+begin_src emacs-lisp :lexical t
;; -*- lexical-binding: t; -*-
#+end_src

** profiling
This function displays how long Emacs took to start.
It's a rough way of knowing when/if I need to optimize my init file.
#+begin_src emacs-lisp :lexical t :tangle no
(add-hook 'elpaca-after-init-hook
          (lambda ()
            (message "Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract (current-time) before-init-time)))
                     gcs-done)))

;; (profiler-start 'cpu+mem)
;; (add-hook 'elpaca-after-init-hook (lambda () (profiler-stop) (profiler-report)))
#+end_src

ELP is useful for seeing which functions in a package are "hot".
#+begin_src emacs-lisp :var file="elpaca" :lexical t :tangle no
(require 'elp)
(with-eval-after-load file
  (elp-instrument-package file))
(add-hook 'elpaca-after-init-hook
          (lambda () (elp-results) (elp-restore-package (intern file))))
#+end_src

** elpaca and preloads
*** installer
#+begin_src emacs-lisp :lexical t
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth nil
                              :pre-build ("git" "remote" "set-url" "origin" "git@github.com:progfolio/elpaca.git")
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (and (message "%S" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order :depth nil))
(setq elpaca-queue-limit 1000)
#+end_src

*** use package 

#+begin_src emacs-lisp :lexical t
(defmacro use-feature (name &rest args)
  "Like `use-package' but accounting for asynchronous installation.
    NAME and ARGS are in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :ensure nil
     ,@args))

(elpaca elpaca-use-package
  (require 'elpaca-use-package)
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))

(elpaca-wait)
#+end_src

*** dependencies
**** turn off unless needed
#+begin_src emacs-lisp :lexical t :tangle no

(setq custom-delayed-init-variables '())
(unload-feature 'eldoc t)
(use-package eldoc
  :demand t
  :config
  (global-eldoc-mode))
(elpaca-wait)

(setq custom-delayed-init-variables '())
(unload-feature 'seq t)
(use-package seq
  :demand t
  )
(elpaca-wait)
#+end_src
**** always on

#+begin_src emacs-lisp :lexical t
(use-package transient
  :defer t)
(use-package git-commit
  :defer t)
(use-package delight
  :defer t)
#+end_src

** my settings and my defs
*** displays
#+begin_src emacs-lisp :lexical t
(global-display-line-numbers-mode t)
(show-paren-mode 1)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(setq font-lock-maximum-decoration 2)

#+end_src

*** global keys

#+begin_src emacs-lisp :lexical t

(keymap-global-set "H-r" 'revert-buffer)
(keymap-global-set "H-l" 'scroll-lock-mode)
(keymap-global-set "C-x e" 'eshell)
(keymap-global-set "C-x C-;" 'comment-line)
(keymap-global-set "H-<up>" 'scroll-other-window-down)
(keymap-global-set "H-<down>" 'scroll-other-window)

#+end_src

*** misc.

#+begin_src emacs-lisp :lexical t
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

(setq mark-ring-max 4)
(setq global-mark-ring-max 4)

(setq initial-buffer-choice t) ;;*scratch*

(setq python-indent-offset 4)
(setq python-indent-guess-indent-offset nil)
#+end_src

*** mouse 
#+begin_src emacs-lisp :lexical t
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src
*** my focus connections

#+begin_src emacs-lisp :lexical t

(defun connect-focusvq-home ()
  (interactive)
  (dired "/ssh:dev:~"))

(setq sql-connection-alist
      '(
        (mysql-fds (sql-product 'mysql)
                   (sql-port 0)
                   (sql-server "db.internal.focusvq.com")
                   (sql-user "fds")
                   (sql-password "WnJSuqmND9i0ePYw")
                   (sql-database "fds"))

        (mysql-elcano (sql-product 'mysql)
                      (sql-port 0)
                      (sql-server "db.internal.focusvq.com")
                      (sql-user "fds")
                      (sql-password "WnJSuqmND9i0ePYw")
                      (sql-database "elcano"))
        )
      )

(keymap-global-set "H-c h" 'connect-focusvq-home)

#+end_src

*** my gc

#+begin_src emacs-lisp :lexical t

(defun my-minibuffer-setup-hook ()
  "Set high gc when minibuffer is open."
  (setq gc-cons-threshold (* 256 1024 1024))
  (setq gc-cons-percentage 1))

(defun my-minibuffer-exit-hook ()
  "Set low GC when minibuffer exits."
  (setq gc-cons-threshold 16777216)
  (setq gc-cons-percentage 0.1))

(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook 'my-minibuffer-exit-hook)
#+end_src

*** recolor ansi
#+begin_src emacs-lisp :lexical t

(defun ansi-color-on-buffer ()
  "..."
  (interactive)

  (replace-string-in-region "[43m" "[45m" (point-min) (point-max) ) ;; replace yellow highlights
  (replace-string-in-region ";43m" ";45m" (point-min) (point-max) )
  (replace-string-in-region "[34m" "[33m" (point-min) (point-max) ) ;; replace blue text
  (replace-string-in-region ";34m" ";33m" (point-min) (point-max) )
  (ansi-color-apply-on-region (point-min) (point-max)))

#+end_src

*** set region writable
This is for when I accidentally make a column in org mode
#+begin_src emacs-lisp :lexical t

(defun set-region-writeable (begin end)
  "Removes the read-only text property from the marked region."
  ;; See http://stackoverflow.com/questions/7410125
  (interactive "r")
  (let ((modified (buffer-modified-p))
        (inhibit-read-only t))
    (remove-text-properties begin end '(read-only t))
    (set-buffer-modified-p modified)))

#+end_src

*** theme and font
#+begin_src emacs-lisp :lexical t
;; (setq custom-theme-directory "~/.emacs.d/themes/")
;; (add-to-list 'load-path custom-theme-directory)
;; (load-theme 'base16-chalk t)
(use-package color-theme-sanityinc-tomorrow
;;  :defer t
  :init
  (setq custom-safe-themes t)   ; Treat all themes as safe
  :config
  (global-hl-line-mode 1)
  (set-face-attribute 'hl-line nil :inherit nil :background "gray6")
  (add-to-list 'default-frame-alist
               '(font . "Hack-12")) 
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (color-theme-sanityinc-tomorrow-bright) 
  )
#+end_src
*** Mac os use meta
#+begin_src emacs-lisp :lexical t

;; :defer t
;; :hook after-init-hook
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (setq mac-option-modifier 'hyper ;; for emacs-mac
        mac-command-modifier 'meta
        mac-right-option-modifier 'super)
  (setq ns-command-modifier 'meta ;; for emacs-plus
        ns-option-modifier 'hyper
        ns-right-option-modifier 'super
        )
  ;;  (setq exec-path-from-shell-debug t)
  :config
  (setq exec-path-from-shell-arguments (list "-l")) ;; (list "-l" "-i")
  (exec-path-from-shell-initialize)
  ;; :defer t
  )
#+end_src

*** tramp
#+begin_src emacs-lisp :lexical t
(use-feature tramp 
  :config
  (setq shell-file-name "/bin/bash") 
  (setq tramp-default-method "ssh")
  (with-eval-after-load 'tramp (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
  (with-eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
  )

(use-package counsel-tramp
  :bind* ("C-c f" . counsel-tramp)
  :defer t
  :init
  (setq make-backup-files nil)
  (setq create-lockfiles nil) 
  )
#+end_src

*** recentf
#+BEGIN_SRC emacs-lisp :lexical t
(use-feature recentf
  :init
  (setq recentf-auto-cleanup 'mode) ;; disable before we start recentf!
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (run-at-time nil (* 5 60) 'recentf-save-list)
  :config
  (recentf-mode 1)
  :defer t
  )
#+END_SRC

** Install Packages
*** ace
**** window
#+begin_src emacs-lisp :lexical t

(use-package ace-window
  :delight
  :bind* ("H-SPC" . ace-window)
  :defer t
  :custom
  (aw-dispatch-always t)
  :init
  (require 'zoom)
  (zoom-mode)
  (defvar aw-dispatch-alist
    '((?d aw-delete-window "Delete Window")
      (?s aw-swap-window "Swap Windows")
      (?m aw-move-window "Move Window")
      (?b aw-switch-buffer-in-window "Select Buffer")
      (?n aw-flip-window)
      (?B aw-switch-buffer-other-window "Switch Buffer Other Window")
      (?c aw-split-window-fair "Split Fair Window")
      (?h aw-split-window-vert "Split Vert Window")
      (?v aw-split-window-horz "Split Horz Window")
      (?o delete-other-windows "Delete Other Windows")
      (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")
  )
#+end_src

**** jump mode
#+begin_src emacs-lisp :lexical t
(use-package ace-jump-mode
  :delight
  :bind* ("H-j" . ace-jump-mode)
  :defer t
  )
#+end_src

**** multiple cursors
#+begin_src emacs-lisp :lexical t
(use-package ace-mc
  :delight
  :bind* ("H-;" . ace-mc-add-multiple-cursors)
  :defer t
  )
#+end_src

*** auto-tangle-mode

#+begin_src emacs-lisp :lexical t

(use-package auto-tangle-mode
  :delight
  :ensure (auto-tangle-mode
           :host github
           :repo "progfolio/auto-tangle-mode.el"
           :local-repo "auto-tangle-mode")
  :defer t 
  ;; :hook org-mode
  ;; :config
  ;; (auto-tangle-mode)
  ;; (add-hook 'auto-tangle-after-tangle-hook (lambda ()
  ;;                                            (let ((elpaca-log-functions nil))
  ;;                                              (load-file "~/.emacs.d/init.el")
  ;;                                              (elpaca-process-queues))))
  )

#+end_src

*** company
#+begin_src emacs-lisp :lexical t

(use-package company
  :delight
  :defer t
  :bind* ("C-<tab>" . company-other-backend)
  :hook ((prog-mode org-mode) . company-mode)
  :custom-face
  (company-preview                      ((t (:background "gray10" :foreground "#c397d8" :extend t))))
  (company-preview-common               ((t (:inherit company-preview :foreground "#c397d8" :extend t))))
  (company-preview-search               ((t (:inherit company-preview :foreground "#7aa6da" :extend t))))
  (company-tooltip                      ((t (:background "gray10" :foreground "#eaeaea" :extend t))))
  (company-tooltip-selection            ((t (:background "gray10" :foreground "#969896" :extend t))))
  (company-tooltip-common               ((t (:inherit company-tooltip :foreground "#c397d8" :extend t))))
  (company-tooltip-common-selection     ((t (:inherit company-tooltip-selection :foreground "#c397d8" :extend t))))
  (company-tooltip-search               ((t (:inherit company-tooltip :foreground "#7aa6da" :extend t))))
  (company-tooltip-annotation           ((t (:inherit company-tooltip :foreground "#70c0b1" :extend t))))
  (company-tooltip-annotation-selection ((t (:inherit company-tooltip-selection :foreground "#70c0b1" :extend t))))
  (company-echo-common                  ((t (:inherit company-echo :foreground "#c397d8" :extend t))))
  :init
  (setq company-tooltip-align-annotations t)
  (setq company-idle-delay nil)
  (setq company-tooltip-idle-delay 1)
  (setq company-minimum-prefix-length 0)
  (setq company-require-match 'never)
  (setq company-show-numbers t)
  (setq company-tooltip-limit 20)
  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-ignore-case t)
  (setq company-dabbrev-code-ignore-case t)
  (setq company-dabbrev-code-everywhere t)
  (setq company-etags-ignore-case t)
  )

#+end_src

*** counsel

#+begin_src emacs-lisp :lexical t
(use-package counsel
  :defer t
  :bind* (
         ("M-x" . counsel-M-x)
         ("C-x b" . ivy-switch-buffer)
         ("C-x C-b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-x d" . counsel-dired)
         ("C-x f" . counsel-recentf)
         ("C-x C-a" . counsel-ag)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable)
         ("C-h i" . counsel-info-lookup-symbol) 
         )
  :delight
  :config
  (counsel-mode)
  )
#+end_src

*** csv
#+begin_src emacs-lisp :lexical t 
  (use-package csv-mode
    :mode "\\.csv\\'"
    )
#+end_src

*** dashboard

#+begin_src emacs-lisp :lexical t

(use-package dashboard
  :custom
  (dashboard-banner-logo-title "It's Emacs time!")
  (dashboard-startup-banner 'logo)
  (dashboard-items '((recents  . 15)
                     (projects . 5)
                     ))
  :config
  ;; (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  ;; (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook)
  )

;; Value can be
;; 'official which displays the official emacs logo
;; 'logo which displays an alternative emacs logo
;; 1, 2 or 3 which displays one of the text banners


#+end_src

*** dired

#+begin_src emacs-lisp :lexical t
(use-package all-the-icons
  :defer t
  :delight
  )
(use-package all-the-icons-dired
  :defer t
  :delight
  :hook (dired-mode . all-the-icons-dired-mode)
  :custom
  (all-the-icons-dired-monochrome nil)
  )
;; (all-the-icons-install-fonts)
(use-package dired-subtree
  :delight
  :custom-face
  (dired-directory ((t (:foreground "#97c8f7" :extend t)))) 
  (dired-marked    ((t (:foreground "#e78c45" :extend t)))) 
  :bind (
         :map dired-mode-map
         ("H-r" . dired-subtree-remove)
         ("<tab>" . dired-subtree-toggle)
         ("H-p" . dired-subtree-up)
         ("H-n" . dired-subtree-down)
         ("H-<up>" . dired-subtree-beginning)
         ("H-<down>" . dired-subtree-end)
         ("H-m" . dired-subtree-mark-subtree)
         ("H-u" . dired-subtree-unmark-subtree)           
         )
  )
(use-package dired-filter
  :custom
  (dired-listing-switches "-alogh")
  :defer t
  :hook (dired-mode)
  )

(use-feature dired
  ;; :bind* ("C-x d" . seth/dired-side-vc)
  :defer t
  :delight
  :config
  (require 'dired-subtree)
  (when (string= system-type "darwin")       
    (setq dired-use-ls-dired nil))
  ;; (defun seth/dired-side--vc (directory)
  ;;   "Open the root directory of the current version-controlled repository or th present working directory with `dired' and bespoke window parameters."
  ;;   (let* (
  ;;          (backend (vc-responsible-backend directory t))
  ;;          (dir (if (eq backend nil)
  ;;                   directory
  ;;                 (expand-file-name (vc-call-backend backend 'root directory))))
  ;;          (dired_dir (dired-noselect dir))
  ;;          (path-list (split-string (first (last (split-string directory dir))) "/"))
  ;;          )
  ;;     (display-buffer-in-side-window
  ;;      dired_dir `((side . left)
  ;;                  (slot . 0)
  ;;                  (window-width . 0.3)
  ;;                  (window-parameters) . ((no-other-window . t)
  ;;                                         (no-delete-other-windows . t)
  ;;                                         (mode-line-format . (" " "%b"))
  ;;                                         )
  ;;                  )
  ;;      )
  ;;     (with-current-buffer dired_dir
  ;;       (setq window-size-fixed 'width)
  ;;       (switch-to-buffer-other-frame dired_dir)
  ;;       (revert-buffer)
  ;;       (dired-hide-details-mode)
  ;;       (goto-char 0)
  ;;       (cl-loop for p in path-list do
  ;;                (goto-char (search-forward p))
  ;;                (dired-subtree-insert)
  ;;                )
  ;;       )
  ;;     )
  ;;   )
  ;; (defun seth/dired-side-vc (&optional initial-input)
  ;;   "Open the root directory of the current version-controlled repository or th present working directory with `dired' and bespoke window parameters."
  ;;   (interactive) 
  ;;   (ivy-read "Dired: " #'read-file-name-internal
  ;;             :matcher #'counsel--find-file-matcher
  ;;             :initial-input initial-input
  ;;             :action (lambda (d) (seth/dired-side--vc (expand-file-name d)))
  ;;             :preselect (counsel--preselect-file)
  ;;             :require-match 'confirm-after-completion
  ;;             :history 'file-name-history
  ;;             :keymap counsel-find-file-map
  ;;             :caller 'counsel-dired)
  ;;   )    
  )


#+end_src

*** drag stuff

#+begin_src emacs-lisp :lexical t
(use-package drag-stuff
  :delight
  :defer t
  :config
  (drag-stuff-global-mode 1)
  :bind* (
         ("C-M-<down>" . drag-stuff-down)
         ("C-M-<up>" . drag-stuff-up)  
         )
  :defer t
  )
#+end_src

*** dumb jump

#+begin_src emacs-lisp :lexical t
(use-package dumb-jump
  :delight
  :custom
  (xref-show-definitions-function #'xref-show-definitions-completing-read)
  :init (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :config
  (add-to-list 'dumb-jump-language-file-exts '(:language "python" :ext "org" :agtype "python" :rgtype "py"))
  (defhydra dumb-jump-hydra (:color blue :columns 3)
    "Dumb Jump"
    ("j" dumb-jump-go "Jump")
    ("o" dumb-jump-go-other-window "Other window")
    ("e" dumb-jump-go-prefer-external "Go external")
    ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
    ("i" dumb-jump-go-prompt "Prompt")
    ("l" dumb-jump-quick-look "Quick look")
    ("b" dumb-jump-back "Back"))
  :bind ("H-h ." . dumb-jump-hydra/body)
  )

#+end_src

*** eglot
#+begin_src emacs-lisp :lexical t
(use-package eglot
  :defer t
  :init
  (defun start-eglot-python (env)
    (interactive "sPython env: ")
    (let* (
           (mypath (concat
                    (shell-command-to-string "conda info --base | tr -d '\n'")
                    (concat "/envs/" env "/bin/pylsp")
                    )
                   )
           )
      (kill-new mypath)
      (call-interactively 'eglot)
      )
    )
  (setq-default eglot-workspace-configuration
                '(:pylsp (:plugins (
                                    :pylint (:enabled :json-false)
                                    :autopep8 (:enabled :json-false)
                                    :yapf (:enabled :json-false)
                                    :mccabe (:enabled :json-false)
                                    ))
                         ))
  (setq eldoc-echo-area-use-multiline-p nil)
  :config
  (global-flycheck-eglot-mode 1)
  )

(use-package jsonrpc
  :defer t
  )

(use-package flycheck-eglot
  :defer t
  )

#+end_src

*** embark
#+begin_src emacs-lisp :lexical t
(use-package embark
  :ensure t
  :defer t
  :bind*
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)  ;; alternative for `describe-bindings'
   ) 

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

#+end_src

*** flycheck
#+begin_src emacs-lisp :lexical t

(use-package flycheck
  :defer t)  

#+end_src

*** google
#+begin_src emacs-lisp :lexical t
;; google-this
(use-package google-this
  :delight
  :config
  (google-this-mode 1))  
#+end_src

*** highlight indend guides

#+begin_src emacs-lisp :lexical t
(use-package indent-bars

  :ensure (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :defer t
  :hook (prog-mode . indent-bars-mode)
  :config
  (setq
   indent-bars-color '(highlight :face-bg t :blend 0.5)
   indent-bars-pattern ". . . . . . . . ." ; play with the number of dots for your usual font size
   indent-bars-width-frac 0.3
   indent-bars-pad-frac 0.1
   indent-bars-display-on-blank-lines t
   indent-tabs-mode nil)

  ;; (setq
  ;;  indent-bars-color '(highlight :face-bg t :blend 0.1)
  ;;  indent-bars-pattern ". . . . . . . . ."
  ;;  indent-bars-width-frac 0.1
  ;;  indent-bars-pad-frac 0.1
  ;;  indent-bars-zigzag nil
  ;;  indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1) ; blend=1: blend with BG only
  ;;  indent-bars-highlight-current-depth '(:blend 1) ; pump up the BG blend on current
  ;;  indent-bars-display-on-blank-lines t)

  (setq indent-bars-treesit-support t)
  (setq indent-bars-no-descend-string t)
  (setq indent-bars-treesit-ignore-blank-lines-types '("module" "call"))
  (setq indent-bars-treesit-wrap '((python
                                    argument_list
                                    attribute
                                    assignment
                                    identifier
                                    parameters
                                    list
                                    list_comprehension
                                    dictionary
                                    dictionary_comprehension
                                    parenthesized_expression
                                    call
                                    expression_statement
                                    subscript)))
  
  ) ; or whichever modes you prefer




;; (use-package highlight-indent-guides
;; :hook (prog-mode . highlight-indent-guides-mode)
;;    :init
;;  (setq highlight-indent-guides-method 'bitmap)
;;      (setq highlight-indent-guides-responsive 'top)

;;    )
#+end_src

*** HL todo

#+begin_src emacs-lisp :lexical t
(use-package hl-todo
  :delight
  :config
  (setq hl-todo-keyword-faces
   '(("TODO"   . "#934b9c")
     ("NOTE"  . "#1E90FF")
     ("HACK"  . "#CC6200")
     ("BUG"  . "#FF0000")
     ))
  (global-hl-todo-mode)
  :bind (
         ("H-t t" . hl-todo-insert)
         ("H-t n" . hl-todo-next)
         ("H-t p" . hl-todo-previous)
         )
  )
#+end_src

*** hydra


#+begin_src emacs-lisp :lexical t

(use-package hydra
  :defer t
  :custom
  (hydra-is-helpful t)
  )
(use-package ivy-hydra
  :defer t)

(use-package pretty-hydra
  :defer t)
#+end_src

*** Ivy
#+begin_src emacs-lisp :lexical t

(use-package ivy
  :init
  (setq ivy-use-virtual-buffers t)
  (setq ivy-virtual-abbreviate 'full)
  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  (setq ivy-height 12)
  (setq ivy-display-style 'fancy)
  (setq ivy-count-format "[%d/%d] ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-use-selectable-prompt t)
  (setq ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
  ;; default pattern ignores order.
  (setf (cdr (assoc t ivy-re-builders-alist))
	    'ivy--regex-ignore-order)
  :delight
  :defer t
  )
#+end_src

*** Jupyter

#+begin_src emacs-lisp :lexical t
(use-package jupyter
  :defer t
  :custom
  (org-babel-jupyter-resource-directory "./plots/")
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (julia . t)
     (python . t)
     (jupyter . t)))
  )

(use-package zmq
  :defer t)
#+end_src

*** magit

#+begin_src emacs-lisp :lexical t

(use-package magit
  :delight
  :defer t
  :bind* ("C-x g" . magit-status)
  :config 
  (setq magit-completing-read-function 'ivy-completing-read)
  (setenv "GIT_ASKPASS" "git-gui--askpass")
  )
#+end_src

*** marginalia
#+begin_src emacs-lisp :lexical t
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind* ("H-a" . marginalia-cycle)
  :defer t
  ;; The :init section is always executed.
  :init
  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

*** markdown mode
#+begin_src emacs-lisp :lexical t

(use-package markdown-mode
  :defer t
  )
  
#+end_src

*** Multiple cursors
#+begin_src emacs-lisp :lexical t
(use-package multiple-cursors
  :bind (         
         ("H-<return> e" . mc/edit-lines)
         ("H-<return> m" . mc/mark-more-like-this-extended)
         ("H-<return> a" . mc/mark-all-like-this)
         ("H-<return> n" . mc/insert-numbers)
         ("H-<return> l" . mc/insert-letters)
         :map mc/keymap
         ("C-;" . mc-hide-unmatched-lines-mode)
         )
  ) 

#+end_src

*** org
**** org general

#+begin_src emacs-lisp :lexical t
(use-feature org
  :defer t
  :custom
  (enable-local-variables t)
  (org-display-remote-inline-images 'cache)
  (org-startup-folded t)
  (org-startup-indented t)
  (org-log-done t)
  (org-return-follows-link t)
  (org-confirm-babel-evaluate nil)
  :bind (
         :map org-mode-map
         ;;("C-M-<up>" . org-shiftmetaup)
         ;;("C-M-<down>" . org-shiftmetadown)
         ("s-C-l" . seth-clear-all-results)
         ("C-M-<left>" . org-shiftmetaleft)
         ("C-M-<right>" . org-shiftmetaright)
         ("C-M-S-<left>" . org-shiftcontrolleft)
         ("C-M-S-<right>" . org-shiftcontrolright)
         ("s-p" . org-babel-previous-src-block)
         ("s-n" . org-babel-next-src-block)
         ("s-l" . org-babel-remove-result)
         ("s-<tab>" . completion-at-point)
         ("s-z" . org-babel-switch-to-session)
         ) 
  :init
  (defun seth-clear-all-results ()
    "Clear all results in the buffer."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (org-babel-next-src-block)
        (forward-line -1)
        (beginning-of-line)
        (when (looking-at "#\\+LASTRUN:")
          (delete-region (pos-bol) (1- (pos-bol 2)))
          (delete-line)
          )
        (forward-line 1)
        (org-babel-remove-result))))

  (add-hook 'org-mode-hook (lambda ()
                             (setq-local seth-jupyter-execution-count 1)))
  ;; (setq seth-jupyter-execution-count 1)
  
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window ;; edit in current window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t ;; do not put two spaces on the left
        org-src-tab-acts-natively t)

  :config
  (require 'scimax-jupyter)
  (defun seth-org-babel-add-time-stamp-after-execute-before-src-block ()
    ;; (sleep-for 2)    
    (end-of-line)
    (save-excursion
      (search-backward "#+BEGIN_SRC" 0 t)
      (forward-line -1)
      (beginning-of-line)

      (if (looking-at "#\\+LASTRUN:")
          (delete-region (pos-bol) (1- (pos-bol 2)))
        (open-line 1)
        (next-line 1)
        )
      
      (insert (concat
               "#+LASTRUN: "
               (format-time-string "[%Y-%m-%d %a %H:%M:%S]" (current-time))
               " ["
               (int-to-string seth-jupyter-execution-count)
               "]"
               ))
      (setq-local seth-jupyter-execution-count (1+ seth-jupyter-execution-count))
      )
    )

  (add-hook 'org-babel-after-execute-hook
            'seth-org-babel-add-time-stamp-after-execute-before-src-block)

  )

;; Backend for HTML Table export

;;(require 'ox-html)
;;(defun ox-mrkup-filter-bold
;;    (text back-end info)
;;  "Markup TEXT as <bold>TEXT</bold>. Ignore BACK-END and INFO."
;;  (format "<bold>%s</bold>" text))
;;
;;(org-export-define-derived-backend 'htmlTable 'html
;;  :filters-alist
;;  '((:filter-body . ox-mrkup-filter-body)
;;    ))

#+end_src

**** org modern

#+begin_src emacs-lisp :lexical t

(use-package org-modern
  :hook (org-mode)
  :defer t
  :custom-face
  (org-block   ((t (:background "gray10" :extend t))))
  (org-block-begin-line   ((t (:inherit org-block :background "#1b2419" :foreground "#876716" :extend t))))
  (org-block-end-line     ((t (:inherit org-block-begin-line :background "gray10" :foreground "#876716" :extend t))))
  ;; (org-document-info      ((t (:foreground "#d5c4a1" :weight bold))))
  ;; (org-document-info-keyword    ((t (:inherit shadow))))
  ;; (org-document-title     ((t (:foreground "#fbf1c7" :weight bold :height 1.4))))
  ;; (org-meta-line          ((t (:inherit shadow))))
  ;; (org-target             ((t (:height 0.7 :inherit shadow))))
  ;; (org-link               ((t (:foreground "#b8bb26" :background "#32302f" :overline nil))))  ;; 
  ;; (org-indent             ((t (:inherit org-hide))))
  ;; (org-indent             ((t (:inherit (org-hide fixed-pitch)))))
  ;; (org-footnote           ((t (:foreground "#8ec07c" :background "#32302f" :overline nil))))
  ;; (org-ref-cite-face      ((t (:foreground "#fabd2f" :background "#32302f" :overline nil))))  ;; 
  ;; (org-ref-ref-face       ((t (:foreground "#83a598" :background "#32302f" :overline nil))))
  ;; (org-ref-label-face     ((t (:inherit shadow :box t))))
  (org-drawer             ((t (:inherit shadow))))
  ;; (org-property-value     ((t (:inherit org-document-info))) t)
  ;; (org-tag                ((t (:inherit shadow))))
  ;; (org-date               ((t (:foreground "#83a598" :underline t))))
  ;; (org-verbatim           ((t (:inherit org-block :background "#3c3836" :foreground "#d5c4a1"))))
  ;; (org-code               ((t (:inherit org-verbatim :background "#181818" :foreground "#90d1fc"))))
  ;; (org-quote              ((t (:inherit org-block :slant italic))))
  ;; (org-level-1            ((t (:background "#181818" :weight bold :height 1.3 :overline nil :underline t :extend t)))) ;; Blue :foreground "#3375a8"
  ;; (org-level-2            ((t (:foreground "#8ec07c" :background "#181818" :weight bold :height 1.2 :overline nil :extend t)))) ;; Aqua
  ;; (org-level-3            ((t (:foreground "#b8bb26" :background "#181818" :weight bold :height 1.1 :overline nil :extend t)))) ;; Green
  ;; (org-level-4            ((t (:foreground "#fabd2f" :background "#181818" :weight bold :height 1.1 :overline nil :extend t)))) ;; Yellow
  ;; (org-level-5            ((t (:foreground "#fe8019" :background "#181818" :weight bold :height 1.1 :overline nil :extend t)))) ;; Orange
  ;; (org-level-6            ((t (:foreground "#fb4934" :background "#181818" :weight bold :height 1.1 :overline nil :extend t)))) ;; Red
  ;; (org-level-7            ((t (:foreground "#d3869b" :background "#181818" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
  ;; (org-level-8            ((t (:background "#181818" :weight bold :height 1.1 :overline nil :extend t))))
  (org-level-1            ((t (:weight bold :height 1.2 :overline nil :underline t :extend t)))) ;; Blue :foreground "#3375a8"
  (org-level-2            ((t (:weight bold :height 1.2 :overline nil :extend t)))) ;; Aqua
  (org-level-3            ((t (:weight bold :height 1.1 :overline nil :extend t)))) ;; Green
  (org-level-4            ((t (:weight bold :height 1.1 :overline nil :extend t)))) ;; Yellow
  (org-level-5            ((t (:weight bold :height 1.1 :overline nil :extend t)))) ;; Orange
  (org-level-6            ((t (:weight bold :height 1.1 :overline nil :extend t)))) ;; Red
  (org-level-7            ((t (:weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
  (org-level-8            ((t (:weight bold :height 1.1 :overline nil :extend t))))
  ;; (org-headline-done      ((t (:foreground "#5ca637" :background "#181818" :weight bold :overline nil :extend t)))) ;; Gray
  ;; (org-headline-todo      ((t (:foreground "#d45555" :background "#181818" :weight bold :overline nil :extend t)))) ;; Gray
  ;; (org-ellipsis           ((t (:inherit shadow :height 1.0 :weight bold :extend t))))
  ;; (org-latex-and-related  ((t (:inherit org-block :extend t))))                                                   
  ;; (org-table              ((t (:foreground "#d5c4a1" ))))
  ;; (org-checkbox           ((t (:foreground "#ffc4a1" :height 1.3))))
  ;;;                                )
  :config
  (setq-local line-spacing 0.1)
  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend))
   'append)

  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:-\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-todo prepend))
   'append)

  (setq
   ;; Edit settings
   org-babel-min-lines-for-block-output 1
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities nil

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────"

   org-agenda-ndays 7
   org-deadline-warning-days 10
   org-agenda-show-all-dates t
   org-agenda-start-on-weekday nil
   org-reverse-note-order t
   org-fast-tag-selection-single-key (quote expert)
   org-log-into-drawer t
   org-image-actual-width nil
   org-export-with-drawers t
   )
  )


#+end_src

*** page-break lines
#+begin_src emacs-lisp :lexical t
  (use-package page-break-lines
    :defer t
    :delight
    :config
    (global-page-break-lines-mode)
    )

#+end_src

*** popper
#+begin_src emacs-lisp :lexical t

(use-package popper
  :init
  (setq popper-group-function 'nil) ; projectile projects #'popper-group-by-projectile
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          compilation-mode
          image-mode
          ))

  ;; Match eshell, shell, term and/or vterm buffers
  (setq popper-reference-buffers
        (append popper-reference-buffers
                '("^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
                  "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
                  "^\\*term.*\\*$"   term-mode   ;term as a popup
                  "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
                  "^\\*jupyter-repl*\\*$" jupyter-repl-mode
                  )))
  :bind (
         ("s-;" . popper-toggle)
         ("s-M-;" . popper-cycle)
         ("s-C-;" . popper-toggle-type)
         )
  :config
  (popper-mode)
  (popper-echo-mode)                ; For echo area hints
  )


#+end_src

*** posframe
#+begin_src emacs-lisp :lexical t
(use-package company-posframe
  :delight
  :config
  (company-posframe-mode 1)
  :bind (
         :map company-active-map
              ("H-<tab>" . company-posframe-quickhelp-toggle)
              ("H-p" . company-posframe-quickhelp-scroll-up)
              ("H-n" . company-posframe-quickhelp-scroll-down)
              )
  )
(use-package ivy-posframe
  :delight
  :defer t
  :hook ((ivy-mode swiper-mode counsel-mode) . ivy-posframe-mode)
  :custom-face
  (ivy-posframe ((t (:background "gray10" :extend t)))) 
  :init
  (setq ivy-posframe-display-functions-alist
        '(
          (swiper          . ivy-display-function-fallback)
          ;; (complete-symbol . ivy-posframe-display-at-point)
          (counsel-M-x     . ivy-posframe-display-at-point)
          (t               . ivy-posframe-display-at-point)))
  
  ;; Different command can use different display function.
  (setq ivy-posframe-height-alist '((swiper . 10)
                                    (t      . 20)))
  (setq ivy-posframe-parameters
        '((left-fringe . 10)
          (right-fringe . 10)))
  )
#+end_src

*** projectile
#+begin_src emacs-lisp :lexical t

(use-package projectile
  :delight '(:eval (concat " [" (projectile-project-name) "]"))
  :config
  (projectile-mode t)
  )

#+end_src

*** python
**** python
#+begin_src emacs-lisp :lexical t

(use-feature python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :bind (
         :map python-mode-map
              ("H-<left>" . python-indent-shift-left)
              ("H-<right>" . python-indent-shift-right)
         )
  )
#+end_src

**** yapify
#+begin_src emacs-lisp :lexical t
(use-package yapfify
  :defer t
  :hook (python-mode . yapf-mode))
;; (add-hook 'python-mode-hook 'yapf-mode)
#+end_src

*** Scimax 
#+begin_src emacs-lisp :lexical t  
(use-feature ox-clip
  :ensure (ox-clip
           :type git
           :host github
           :repo "jkitchin/ox-clip"
           :local-repo "ox-clip"
           :files (:defaults)
           )
  :defer t
  )

(use-package scimax-jupyter
  :ensure (scimax
           :type git
           :host github
           :repo "jkitchin/scimax"
           :local-repo "scimax"
           :files (:defaults (:exclude "*.org" "scimax.el" "bootstrap.el" "init.el" "packages.el" "scimax-evil.el" "debug-windows.el"))
           )
  :config
  (defconst scimax-dir (file-name-directory "./elpaca/builds/scimax/"))  
  (add-to-list 'load-path scimax-dir)
  ;; ** helper functions
  (defun /jupyter-clean-async--results () 
    "cleans drawer results for async jupyter code blocks"
    (search-forward "#+begin_example")
    (beginning-of-line)
    (delete-region (pos-bol) (pos-bol 2)) 
    (search-forward "#+end_example")
    (beginning-of-line)
    (delete-region (pos-bol) (pos-bol 2))
    )

  (defun /jupyter-clean-async-ansi--results ()
    "cleans drawer results for async jupyter code blocks"
    (let* ((r (org-babel-where-is-src-block-result))
	       (result (when r
		             (save-excursion
		               (goto-char r)
		               (org-element-context)))))
      (when result
        (let* ((sp (org-element-property :begin result))
               (ep (org-element-property :end result)))
          (replace-string-in-region "[43m" "[45m" sp ep ) ;; replace yellow highlights
          (replace-string-in-region ";43m" ";45m" sp ep )
          (replace-string-in-region "[34m" "[33m" sp ep ) ;; replace blue text
          (replace-string-in-region ";34m" ";33m" sp ep )
          t
          ))
      t)
    (scimax-jupyter-ansi)
    (/jupyter-clean-async--results)
    )

  (defun seth-interrupt-kernel ()
    "Clear all results in the buffer."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      ;; (while (org-babel-next-src-block)
      ;;   (forward-line 1)
      ;;   ;; (jupyter-org-interrupt-kernel)
      ;;   )
      (let* ((num 0))
        (while (< num 5)
          (org-babel-next-src-block)
          (forward-line 1)
          (jupyter-org-interrupt-kernel)
          (setq num (+1 num))))
      )
    )
  ;; *** remove result if empty
  (with-eval-after-load 'jupyter-client
    (defun /jupyter-remove-empty-async-results (args)
      "remove results block if the results are empty"
      (let*
          ((req (nth 1 args))
           (msg (nth 2 args))
           (is-org-request (eq (type-of req) 'jupyter-org-request)))
        (when is-org-request
          (jupyter-with-message-content msg (status payload)
            (when (and (jupyter-org-request-async-p req)
                       (equal status "ok")
                       (not (jupyter-org-request-id-cleared-p req)))
              (jupyter-org--clear-request-id req)
              (org-with-point-at (jupyter-org-request-marker req)
                (org-babel-remove-result)))))
        args))
    (unless (advice-member-p #'/jupyter-remove-empty-async-results 'jupyter-handle-execute-reply)
      (advice-add 'jupyter-handle-execute-reply :filter-args #'/jupyter-remove-empty-async-results)))

  ;; *** remove example and clean up errors
  (with-eval-after-load 'jupyter-client
    (defun /jupyter-ansi-async-results (args)
      "Translate the ansi key code in results with errors"
      (let*
          ((req (nth 1 args))
           (msg (nth 2 args))
           (is-org-request (eq (type-of req) 'jupyter-org-request)))
        (when is-org-request
          (jupyter-with-message-content msg (status payload)
            (when (and (jupyter-org-request-async-p req)
                       (not (equal status "ok")))
              (org-with-point-at (jupyter-org-request-marker req)
                (/jupyter-clean-async-ansi--results)
                )
              (org-with-point-at (jupyter-org-request-marker req)
                (when (not (search-forward "KeyboardInterrupt" nil t))
                  (seth-interrupt-kernel)))
              )))
        args))
    (unless (advice-member-p #'/jupyter-ansi-async-results 'jupyter-handle-execute-reply)
      (advice-add 'jupyter-handle-execute-reply :filter-args #'/jupyter-ansi-async-results)))

  ;; *** remove example src block from result
  (with-eval-after-load 'jupyter-client
    (defun /jupyter-clean-async-results (args)
      "calls the cleaning of async results in jupyter blocks"
      (let*
          ((req (nth 1 args))
           (msg (nth 2 args))
           (is-org-request (eq (type-of req) 'jupyter-org-request)))
        (when is-org-request
          (jupyter-with-message-content msg (status payload)
            (when (and (jupyter-org-request-async-p req)
                       (equal status "ok")
                       (jupyter-org-request-id-cleared-p req))
              (org-with-point-at (jupyter-org-request-marker req)
                (/jupyter-clean-async--results)
                ))))
        args))

    (unless (advice-member-p #'/jupyter-clean-async-results 'jupyter-handle-execute-reply)
      (advice-add 'jupyter-handle-execute-reply :filter-args #'/jupyter-clean-async-results)))

  ;; * Numbered lines in code blocks
  (defvar number-line-overlays '()
    "List of overlays for line numbers.")

  (make-variable-buffer-local 'number-line-overlays)

  (defun number-line-src-block ()
    "Add line numbers to an org src-block."
    (interactive)
    (save-excursion
      (let* ((src-block (org-element-context))
             (nlines (- (length
                         (s-split
                          "\n"
                          (org-element-property :value src-block)))
                        1)))
        ;; clear any existing overlays
        (when number-line-overlays
	      (mapc 'delete-overlay
	            number-line-overlays)
	      (setq number-line-overlays '()))

        (goto-char (org-element-property :begin src-block))
        ;; the beginning may be header, so we move forward to get the #+BEGIN
        ;; line. Then jump one more to get in the code block
        (while (not (looking-at "#\\+BEGIN"))
	      (forward-line))
        (forward-line)
        (cl-loop for i from 1 to nlines
                 do
                 (beginning-of-line)
                 (let (ov)
		           (setq ov (make-overlay (point)(point)))
		           (overlay-put
		            ov
		            'before-string (propertize
				                    (format "%03s: " (number-to-string i))
				                    'font-lock-face '(:foreground "WhiteSmoke" :background "gray10")
				                    'local-map (let ((map (make-sparse-keymap)))
					                             (define-key map [mouse-1]
						                                     (lambda ()
						                                       (interactive)
						                                       (mapc 'delete-overlay
							                                         number-line-overlays)
						                                       (setq number-line-overlays '())))
					                             map)))
		           (overlay-put ov 'mouse-face 'highlight)
		           (overlay-put ov 'help-echo "Click to remove")
		           (overlay-put ov 'local-map (let ((map (make-sparse-keymap)))
					                            (define-key map [mouse-1]
						                                    (lambda ()
						                                      (interactive)
						                                      (mapc 'delete-overlay
							                                        number-line-overlays)
						                                      (setq number-line-overlays '())))
					                            map))
		           (add-to-list 'number-line-overlays ov))
                 (forward-line))))
    (add-hook 'post-command-hook 'number-line-src-block nil 'local)
    )

  (add-hook 'jupyter-repl-mode-hook 'company-mode)
  (add-hook 'jupyter-repl-mode-hook 'smartparens-mode)
  (add-hook 'jupyter-repl-mode-hook ;; org mode
            '(lambda ()
               (local-set-key (kbd "H-h h") 'scimax-jupyter-org-hydra/body)
               ))

  (pretty-hydra-define scimax-jupyter-org-hydra (:color blue :hint nil)
    ("Execute"
     (
      ("<return>" nil "quit" :color red)
      ("C-c C-c" org-ctrl-c-ctrl-c "current" :color red)
      ("C-<return>" jupyter-org-execute-and-next-block "current and next" :color red)
      ("H-<return>" (progn (org-ctrl-c-ctrl-c) (scimax-ob-insert-src-block t)) "current and new")
      ("S-C-<return>" jupyter-org-execute-to-point "Execute to point")
      ("S-M-<return>" jupyter-org-execute-subtree "Execute Subtree"))

     "Navigate"
     (("p" org-babel-previous-src-block "previous" :color red)
      ;; ("P" jupyter-org-previous-busy-src-block "previous busy")
      ("n" org-babel-next-src-block  "next" :color red)
      ;; ("N" jupyter-org-next-busy-src-block "next busy" :color red)
      ("g" jupyter-org-jump-to-visible-block "jump to visible src")
      ("G" jupyter-org-jump-to-block "jump to src block")
      ("e" scimax-jupyter-jump-to-error "Jump to error"))

     "Edit"
     (("<up>" jupyter-org-move-src-block "move up" :color red)
      ("<down>" (jupyter-org-move-src-block t) "move down" :color red)
      ("x" jupyter-org-kill-block-and-results "kill block")
      ("c" jupyter-org-copy-block-and-results "copy block")
      ("o" (jupyter-org-clone-block t) "clone")
      ("m" jupyter-org-merge-blocks "merge")
      ("s" jupyter-org-split-src-block "split")
      ("a" (jupyter-org-insert-src-block nil current-prefix-arg) "insert above")
      ("b" (jupyter-org-insert-src-block t current-prefix-arg) "insert below")
      ("l" org-babel-remove-result "clear result")
      ("L" seth-clear-all-results "clear all results")
      ("h" jupyter-org-edit-header "edit header"))

     "Misc"
     (("i" jupyter-org-inspect-src-block "inspect")
      ("<tab>" completion-at-point "Complete")
      
      ("O" scimax-ob/body "scimax-ob")
      ("E" ox-ipynb-export-to-ipynb-no-results-file-and-open "Export to ipynb no results")
      ("q" nil "quit"))
     
     "Kernel"
     (("s" org-babel-jupyter-scratch-buffer "scratch")
      ("z" org-babel-switch-to-session "REPL")
      ("u" jupyter-org-interrupt-kernel "interrupt")
      ("r" (progn (setq-local seth-jupyter-execution-count 1)
                  (jupyter-org-with-src-block-client
	               (jupyter-repl-restart-kernel))) "restart")
      ("k" (progn (setq-local seth-jupyter-execution-count 1) (scimax-jupyter-org-kill-kernel)) "kill"))))

  :bind (
         ;; ("H-h w" . words-hydra/body)
         :map jupyter-org-interaction-mode-map
         ("H-h j" . scimax-jupyter-org-hydra/body)
         ("H-<left>" . python-indent-shift-left)
         ("H-<right>" . python-indent-shift-right)
         ("C-<return>" . jupyter-org-execute-and-next-block)
         ("s-g" . jupyter-org-jump-to-visible-block)              
         ("s-e" . scimax-jupyter-jump-to-error)
         ("s-<up>" . jupyter-org-move-src-block)
         ("s-<down>" . (lambda () (interactive) (jupyter-org-move-src-block t)))
         ("s-x" . jupyter-org-kill-block-and-results)
         ("s-c" . jupyter-org-copy-block-and-results)
         ("s-o" . (lambda () (interactive) (jupyter-org-clone-block t)))
         ("s-m" . jupyter-org-merge-blocks)
         ("s-s" . jupyter-org-split-src-block)
         ("s-a" . jupyter-org-insert-src-block)
         ("s-b" . (lambda () (interactive) (jupyter-org-insert-src-block t)))
         ("s-i" . jupyter-org-inspect-src-block)
         ("s-u" . jupyter-org-interrupt-kernel)
         ("s-k" . (lambda () (interactive) (progn (setq-local seth-jupyter-execution-count 1)
                                                  (scimax-jupyter-org-kill-kernel))))
         ("s-r" . (lambda () (interactive) (progn (setq-local seth-jupyter-execution-count 1)
                                                  (jupyter-org-with-src-block-client
                                                   (jupyter-repl-restart-kernel))))) 
         )
  ) 

#+end_src

*** sideline mode
#+begin_src emacs-lisp :lexical t
(use-package sideline
  :delight
  :defer t
  :hook (
         (flycheck-mode . sideline-mode)  
         (flymake-mode  . sideline-mode)
         )

  :init
  (setq sideline-backends-left-skip-current-line nil   ; don't display on current line (left)
        sideline-backends-right-skip-current-line nil  ; don't display on current line (right)
        sideline-order-left 'down                    ; or 'up
        sideline-order-right 'up                     ; or 'down
        sideline-format-left "%s"                 ; format for left aligment
        sideline-format-right "%s"                ; format for right aligment
        sideline-priority 100                        ; overlays' priority
        sideline-display-backend-name t)             ; display the backend name
  (setq sideline-backends-right '(sideline-flycheck)
        )
  
  )

(use-package sideline-flycheck
  :defer t
  :hook (flycheck-mode . sideline-flycheck-setup))


#+end_src

*** smart-mode-line
#+begin_src emacs-lisp :lexical t

(use-package smart-mode-line
  :delight
  :init
  (setq sml/name-width 50
        sml/mode-width 50)
  (setq sml/theme 'respectful)
  :config
  (sml/setup)
  )
  
#+end_src

*** smartparens

#+begin_src emacs-lisp :lexical t

(use-package smartparens
  :delight
  :config
  (require 'smartparens-config)
  (smartparens-global-mode t)
  :bind* (
         ("M-<up>"  . sp-beginning-of-sexp)
         ("M-<down>"  . sp-end-of-sexp)
         ("C-<right>"  . sp-forward-slurp-sexp)
         ("M-<right>"  . sp-forward-barf-sexp)
         ("C-<left>"   . sp-backward-slurp-sexp)
         ("M-<left>"   . sp-backward-barf-sexp)
         ("C-M-k"  . sp-kill-sexp)
         ("C-k"    . sp-kill-hybrid-sexp)
         ("M-k"    . sp-backward-kill-sexp)
         ("C-M-w"  . sp-copy-sexp)
         ("M-s s"  . sp-split-sexp)
         ("M-s j"  . sp-join-sexp)
         ("M-]"  . sp-backward-unwrap-sexp)
         ("M-["  . sp-unwrap-sexp)
         ("C-x C-t"  . sp-transpose-hybrid-sexp)
         )
  :demand t
  )

#+end_src

*** smex
#+begin_src emacs-lisp :lexical t
;; keep recent commands available in M-x
(use-package smex)
  
#+end_src

*** Swiper
#+begin_src emacs-lisp :lexical t
(use-package swiper
  :config
  (defadvice swiper (before dotemacs activate)
    (setq gc-cons-threshold most-positive-fixnum))
  (defadvice swiper-all (before dotemacs activate)
    (setq gc-cons-threshold most-positive-fixnum))
  :defer t
  :delight
  :bind* (
         ("C-s" . swiper)
         ("H-s" . swiper-all)
         )
  )

#+end_src

*** tabbar

#+begin_src emacs-lisp :lexical t
(use-package tabbar
  :defer t
  :bind* (
          ("M-S-<up>" . tabbar-press-home)
          ("M-S-<left>" . tabbar-backward-tab)
          ("M-S-<right>" . tabbar-forward-tab)
          ("M-S-<down>" . tabbar-local-mode)
          ("C-S-<left>" . tabbar-move-group-backward)
          ("C-S-<right>" . tabbar-move-group-forward)
          )

  :config
  (tabbar-mode t)
  (defun tabbar-buffer-groups ()
    "Return the list of group names the current buffer belongs to.
       This function is a custom function for tabbar-mode's tabbar-buffer-groups.
       This function group all buffers into 3 groups:
       Those Dired, those user buffer, and those emacs buffer.
       Emacs buffer are those starting with “*”."
    (list
     (cond
      ((eq major-mode 'dired-mode)
       "Dired"
       )
      ((eq major-mode 'jupyter-repl-mode)
       "Kernels"
       )
      ((eq major-mode 'js2-mode)
       "js"
       )
      ((eq major-mode 'eshell-mode)
       "Eshell"
       )
      ((eq major-mode 'vterm-mode)
       "Term"
       )
      ((eq major-mode 'go-mode)
       "Go"
       )
      ((eq major-mode 'org-mode)
       "Org"
       )
      ((eq major-mode 'python-mode)
       "Python"
       )
      ((string-equal "*ein:" (substring (buffer-name) 0 5))
       "EIN"
       )
      ((string-equal "*Pyth" (substring (buffer-name) 0 5))
       "Python"
       )
      ((eq major-mode 'php-mode)
       "PHP"
       )
      ((eq major-mode 'csv-mode)
       "CSV"
       )
      ((eq major-mode 'text-mode)
       "TXT"
       )
      ((eq major-mode 'shell-script-mode)
       "Script"
       )
      ((eq major-mode 'sh-mode)
       "Script"
       )
      ((string-equal "*PHP*" (substring (buffer-name) 0 5))
       "PHP"
       )
      ((string-equal "*" (substring (buffer-name) 0 1))
       "Emacs Buffer"
       )
      ((string-equal "magit:" (substring (buffer-name) 0 6))
       "Magit"
       )
      ((eq major-mode 'lispy-mode)
       "Lisp"
       )
      ((eq major-mode 'lisp-mode)
       "Lisp"
       )
      ((eq major-mode 'emacs-lisp-mode)
       "Lisp"
       )
      ((eq major-mode 'image-mode)
       "Images"
       )
      (t
       "Misc"
       )
      )))

  (defun tabbar-move-current-tab-one-place-left ()
    "Move current tab one place left, unless it's already the leftmost."
    (interactive)
    (let* ((bufset (tabbar-current-tabset t))
           (old-bufs (tabbar-tabs bufset))
           (first-buf (car old-bufs))
           (new-bufs (list)))
      (if (string= (buffer-name) (format "%s" (car first-buf)))
          old-bufs                     ; the current tab is the leftmost
        (setq not-yet-this-buf first-buf)
        (setq old-bufs (cdr old-bufs))
        (while (and
                old-bufs
                (not (string= (buffer-name) (format "%s" (car (car old-bufs))))))
          (push not-yet-this-buf new-bufs)
          (setq not-yet-this-buf (car old-bufs))
          (setq old-bufs (cdr old-bufs)))
        (if old-bufs ; if this is false, then the current tab's buffer name is mysteriously missing
            (progn
              (push (car old-bufs) new-bufs) ; this is the tab that was to be moved
              (push not-yet-this-buf new-bufs)
              (setq new-bufs (reverse new-bufs))
              (setq new-bufs (append new-bufs (cdr old-bufs))))
          (error "Error: current buffer's name was not found in Tabbar's buffer list."))
        (set bufset new-bufs)
        (tabbar-set-template bufset nil)
        (tabbar-display-update))))

  (defun tabbar-move-current-tab-one-place-right ()
    "Move current tab one place right, unless it's already the rightmost."
    (interactive)
    (let* ((bufset (tabbar-current-tabset t))
           (old-bufs (tabbar-tabs bufset))
           (first-buf (car old-bufs))
           (new-bufs (list)))
      (while (and
              old-bufs
              (not (string= (buffer-name) (format "%s" (car (car old-bufs))))))
        (push (car old-bufs) new-bufs)
        (setq old-bufs (cdr old-bufs)))
      (if old-bufs ; if this is false, then the current tab's buffer name is mysteriously missing
          (progn
            (setq the-buffer (car old-bufs))
            (setq old-bufs (cdr old-bufs))
            (if old-bufs ; if this is false, then the current tab is the rightmost
                (push (car old-bufs) new-bufs))
            (push the-buffer new-bufs)) ; this is the tab that was to be moved
        (error "Error: current buffer's name was not found in Tabbar's buffer list."))
      (setq new-bufs (reverse new-bufs))
      (setq new-bufs (append new-bufs (cdr old-bufs)))
      (set bufset new-bufs)
      (tabbar-set-template bufset nil)
      (tabbar-display-update)))

  (setq tabbar-buffer-groups-function 'tabbar-buffer-groups)

  (setq tabbar-use-images nil)

  (defun tabbar-move-group-backward ()
    "My version of keeping groups visible."
    (interactive)
    (tabbar-backward-tab)
    (tabbar-press-home)
    )
  (defun tabbar-move-group-forward ()
    "My version of keeping groups visible."
    (interactive)
    (tabbar-forward-tab)
    (tabbar-press-home)
    )

  )
#+end_src

*** tree-sitter
#+begin_src emacs-lisp :lexical t
(use-package tree-sitter
  :delight
  :hook
  ((lua-mode
    python-mode
    emacs-lisp-mode
    csv-mode
    json-mode
    sh-mode
    typescript-mode
    yaml-mode
    ) . siren-tree-sitter-mode-enable)

  :config
  (defun siren-tree-sitter-mode-enable ()
    (tree-sitter-mode t)
    (tree-sitter-hl-mode)
    )
  :defer t)

(use-package tree-sitter-langs
  :defer t
  :after tree-sitter
  )
#+end_src

*** undo-tree
#+begin_src emacs-lisp :lexical t

(use-package undo-tree
  :delight
  :custom
  (undo-tree-history-directory-alist `(("." . "~/.emacs.d/.saves")))
  (backup-directory-alist `(("." . "~/.emacs.d/.saves")))
  (backup-by-copying t)
  (delete-old-versions t)
  (kept-new-versions 2)
  (kept-old-versions 6)
  (version-control t)       ; use versioned backups
  (undo-tree-enable-undo-in-region t)

  :config
  (global-undo-tree-mode)
  )

  #+end_src

*** vterm
#+begin_src emacs-lisp :lexical t
(use-package vterm
  :defer t
  )
(use-package multi-vterm
  :init
  (setq vterm-tramp-shells '(("ssh" "/usr/bin/zsh")))
  (setq vterm-shell "/usr/local/bin/zsh")
  :bind (
         ("C-x t" . multi-vterm-project)
         ("C-x M-t" . multi-vterm)
         )
  )

#+end_src

*** yas
#+begin_src emacs-lisp :lexical t

(use-package yasnippet
  :delight yas-minor-mode
  :defer t
  :config
  (yas-global-mode 1)
  )

(use-package yasnippet-snippets  
  )

(use-package ivy-yasnippet
  :bind ("H-," . ivy-yasnippet)
  )
#+end_src

*** zoom
#+begin_src emacs-lisp :lexical t
(use-package zoom
  :delight
  :custom
  (zoom-size '(0.618 . 0.618))
  :defer t
  )
#+end_src

